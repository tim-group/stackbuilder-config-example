{"name":"Stackbuilder-config","tagline":"","body":"### Stackbuild Config        \r\nThis is a DSL that is used by stacks to configure services allows the following to be defined.\r\n\r\n## Terminology:\r\n\r\n### Computenode                                                                                                                                                                                                                               \r\n* KVM host that has been setup to host Stacks                                                                                                                                                                                           \r\n                                                                                                                                                                                                                                          \r\n### Environments                                                                                                                                                                                                                              \r\n* Contain a primary_site (location)                                                                                                                                                                                                     \r\n* Contain a secondary_site (location)                                                                                                                                                                                                   \r\n* Container for Stacks                                                                                                                                                                                                                  \r\n                                                                                                                                                                                                                                           \r\n### Stack                                                                                                                                                                                                                                     \r\n* Container of Virtual Services                                                                                                                                                                                                         \r\n* Exist in 0 or more environment                                                                                                                                                                                                        \r\n* Can be configured differently but are generally identical across all environments                                                                                                                                                     \r\n                                                                                                                                                                                                                                           \r\n### Virtual Service                                                                                                                                                                                                                           \r\n* Container consisting of 1 or more virtual machine                                                                                                                                                                                     \r\n* Load balanced these can work jointly to provide a service eg. several apache servers provide proxying                                                                                                                                 \r\n* Non-load balanced virtual machines, operate in a standalone basis (JBOVM)                                                                                                                                                             \r\n                                                                                                                                                                                                                                           \r\n### Virtual Machine                                                                                                                                                                                                                           \r\n* A single machine of a given type: e.g a single apache virtual machine                                                                                                                                                                 \r\n* Can be individually configured but are generally identical to their siblings                                                                                                                                                          \r\n\r\n## Basic Usage\r\n### Show all stacks available with the name 'helloworld'\r\n```\r\n$ env='staging' rake -T helloworld\r\nrake sbx:helloworld:allocate            # allocate these machines to hosts (but don't actually launch them - this is a dry run)\r\nrake sbx:helloworld:allocate_vips       # allocate IPs for these virtual services\r\nrake sbx:helloworld:audit_hosts         # new hosts model auditing\r\nrake sbx:helloworld:clean               # clean away all traces of these machines\r\nrake sbx:helloworld:disable_notify      # disable notify for these machines\r\nrake sbx:helloworld:enable_notify       # enable notify for these machines\r\nrake sbx:helloworld:free_ip_allocation  # frees up ip and vip allocation of these machines\r\nrake sbx:helloworld:free_ips            # free IPs\r\nrake sbx:helloworld:free_vips           # free IPs for these virtual services\r\nrake sbx:helloworld:launch              # launch these machines\r\nrake sbx:helloworld:mping               # perform an MCollective ping against these machines\r\nrake sbx:helloworld:orc:resolve         # deploys the up2date version of the artifact according to the cmdb using orc\r\nrake sbx:helloworld:provision           # perform all steps required to create and configure the machine(s)\r\nrake sbx:helloworld:puppet:clean        # Remove signed certs from puppetmaster\r\nrake sbx:helloworld:puppet:poll_sign    # sign outstanding Puppet certificate signing requests for these machines\r\nrake sbx:helloworld:puppet:run          # run Puppet on these machines\r\nrake sbx:helloworld:puppet:sign         # sign outstanding Puppet certificate signing requests for these machines\r\nrake sbx:helloworld:puppet:wait         # wait for puppet to complete its run on these machines\r\nrake sbx:helloworld:reprovision         # perform a clean followed by a provision\r\nrake sbx:helloworld:resolve             # resolve the IP numbers of these machines\r\nrake sbx:helloworld:test                # carry out all appropriate tests on these machines\r\nrake sbx:helloworld:to_specs            # outputs the specs for these machines, in the format to feed to the provisioning tools\r\nrake sbx:helloworld:to_vip_spec         # outputs the specs for these machines, in the format to feed to the provisioning tools\r\n```\r\n\r\n### Show all options available for the Virtual Machine staging-helloapp-001     \r\n```\r\n$ env='staging' rake -T staging-helloapp-001                                                                                                                   \r\nrake sbx:staging-helloapp-001:allocate            # allocate these machines to hosts (but don't actually launch them - this is a dry run)\r\nrake sbx:staging-helloapp-001:allocate_vips       # allocate IPs for these virtual services\r\nrake sbx:staging-helloapp-001:audit_hosts         # new hosts model auditing\r\nrake sbx:staging-helloapp-001:clean               # clean away all traces of these machines\r\nrake sbx:staging-helloapp-001:disable_notify      # disable notify for these machines\r\nrake sbx:staging-helloapp-001:enable_notify       # enable notify for these machines\r\nrake sbx:staging-helloapp-001:free_ip_allocation  # frees up ip and vip allocation of these machines\r\nrake sbx:staging-helloapp-001:free_ips            # free IPs\r\nrake sbx:staging-helloapp-001:free_vips           # free IPs for these virtual services\r\nrake sbx:staging-helloapp-001:launch              # launch these machines\r\nrake sbx:staging-helloapp-001:mping               # perform an MCollective ping against these machines\r\nrake sbx:staging-helloapp-001:orc:resolve         # deploys the up2date version of the artifact according to the cmdb using orc\r\nrake sbx:staging-helloapp-001:provision           # perform all steps required to create and configure the machine(s)\r\nrake sbx:staging-helloapp-001:puppet:clean        # Remove signed certs from puppetmaster\r\nrake sbx:staging-helloapp-001:puppet:poll_sign    # sign outstanding Puppet certificate signing requests for these machines\r\nrake sbx:staging-helloapp-001:puppet:run          # run Puppet on these machines\r\nrake sbx:staging-helloapp-001:puppet:sign         # sign outstanding Puppet certificate signing requests for these machines\r\nrake sbx:staging-helloapp-001:puppet:wait         # wait for puppet to complete its run on these machines\r\nrake sbx:staging-helloapp-001:reprovision         # perform a clean followed by a provision\r\nrake sbx:staging-helloapp-001:resolve             # resolve the IP numbers of these machines\r\nrake sbx:staging-helloapp-001:test                # carry out all appropriate tests on these machines\r\nrake sbx:staging-helloapp-001:to_enc              # outputs the specs for these machines, in the format to feed to the provisioning tools\r\nrake sbx:staging-helloapp-001:to_specs            # outputs the specs for these machines, in the format to feed to the provisioning tools\r\nrake sbx:staging-helloapp-001:to_vip_spec         # outputs the specs for these machines, in the format to feed to the provisioning tools\r\n```\r\n\r\n### Show machine spec for Virtual Machine staging-helloapp-001\r\n```\r\n$ env='staging' rake sbx:staging-helloapp-001:to_specs                                                                                                         \r\n--- \r\n  - !ruby/sym networks: \r\n      - !ruby/sym mgmt\r\n      - !ruby/sym prod\r\n    !ruby/sym ram: \"2097152\"\r\n    !ruby/sym fabric: earth\r\n    !ruby/sym domain: earth.net.local\r\n    !ruby/sym vcpus: \"1\"\r\n    !ruby/sym qualified_hostnames: \r\n      !ruby/sym mgmt: staging-helloapp-001.mgmt.earth.net.local\r\n      !ruby/sym prod: staging-helloapp-001.earth.net.local\r\n    !ruby/sym hostname: staging-helloapp-001\r\n    !ruby/sym availability_group: staging-helloapp\r\n    !ruby/sym storage: \r\n      !ruby/sym /: \r\n        !ruby/sym type: os\r\n        !ruby/sym prepare: \r\n          !ruby/sym method: image\r\n          !ruby/sym options: \r\n            !ruby/sym path: /var/local/images/gold/generic.img\r\n        !ruby/sym size: \"5G\"\r\n```\r\n### Show ENC data (puppet code) for Virtual Machine staging-helloapp-001\r\n```\r\nenv='staging' rake sbx:staging-helloapp-001:to_enc\r\n--- \r\n  \"role::http_app\": \r\n    port: \"8000\"\r\n    dependencies: \r\n      db.hello.hostname: staging-hellodb-001.earth.net.local\r\n      db.hello.database: hello\r\n      db.hello.username: JavaHttpRef\r\n      db.hello.password_hiera_key: enc/staging/JavaHttpRef/mysql_password\r\n    environment: staging\r\n    vip_fqdn: staging-helloapp-vip.earth.net.local\r\n    group: blue\r\n    dependant_instances: \r\n      - staging-helloproxy-001.earth.net.local\r\n      - staging-helloproxy-002.earth.net.local\r\n      - staging-lb-001.earth.net.local\r\n      - staging-lb-002.earth.net.local\r\n    application: JavaHttpRef\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}